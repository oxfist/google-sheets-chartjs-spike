import Head from 'next/head';

import { GoogleSpreadsheet } from 'google-spreadsheet';

import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { Bar } from 'react-chartjs-2';

import styles from '../styles/Home.module.css';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

const CONFIRMED = 'Confirmado';
const ABSENT = 'Ausente';
const LABELS = ['Contacto Personal', 'Propaganda Calle', 'Redes Sociales'];

const options = {
  responsive: true,
  plugins: {
    legend: {
      position: 'top',
    },
    title: {
      display: true,
    },
  },
};

export default function Home({ title, data }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>{`${title}`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>{`${title}`}</h1>
        <div className={styles.graphContainer}>
          <Bar options={options} data={data} />
        </div>
      </main>
    </div>
  );
}

export async function getStaticProps(_context) {
  const { title, sheet } = await getSpreadsheet();

  const rows = await sheet.getRows();
  const data = rows.map((row) => ({
    name: row['Nombre completo'],
    email: row['Correo electrónico'],
    occupation: row['Ocupación'],
    reference: row['Cómo supiste de nosotros?'],
    state: row['Estado asistencia'],
  }));

  const graphData = {
    labels: LABELS,
    datasets: [
      {
        label: CONFIRMED,
        data: LABELS.map(
          (label) =>
            data.filter(
              (row) =>
                row.state.toLowerCase() === CONFIRMED.toLowerCase() &&
                row.reference.toLowerCase() === label.toLowerCase()
            ).length
        ),
        backgroundColor: 'rgba(53, 162, 235, 0.5)',
      },
      {
        label: ABSENT,
        data: LABELS.map(
          (label) =>
            data.filter(
              (row) =>
                row.state.toLowerCase() === ABSENT.toLowerCase() &&
                row.reference.toLowerCase() === label.toLowerCase()
            ).length
        ),
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      },
    ],
  };

  return {
    props: {
      title,
      data: graphData,
    },
  };
}

async function getSpreadsheet() {
  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID);

  await doc.useServiceAccountAuth({
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY,
  });

  await doc.loadInfo();

  const sheet = doc.sheetsById['0'];

  return { title: doc.title, sheet };
}
